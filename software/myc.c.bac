// license:GPL-2.0+
// copyright-holders: Martin Howse

// based on wormed.c for voices, also myc_microbd.c

// this is more or less just test code here with other codes such as microbd, wormed, test/data tones, white noise filtered in different files

// white noise and filter/volume, wormed voice oscillations, shift register with leaks, test tone transmits - regularity driven
// see also mozzi for filters maybe

// live codings, timings of on/off FET

// say measure temp and see how much we deviate from running average - running average window filter
// loop and replay sd card values

// also shift register work

//////////////////////////////////////////////////////////////////////////

// FET switch-X
// HIH-X
// basic tones-X
// SD card raw read and write-X
// ADCs: ADC0 is marked ADC_LIGHT
// MAX31865-X, 555 interrupt on INT0-X

// write to SD/ read back in loop: 1 day with 1sec delay = 24hrx60minx60sec=86400 values - playback rates...
//2000000000; 2e9 2gb - 23k days

//////////////////////////////////////////////////////////////////////////

// define sensors: 
//#define FIVEFIVE 1
//#define HIH 1
//#define MAX 1
//#define C02 1
//#define AD620 1 // can be from earthboot or from mushroom
//#define ADC // which ones=WHICH
//#define AD5933 1 // or we seperate that out in other file as code is quite long

// define audio mode:

// define FET mode:

#define FETADC 1

// define SDCARD:
//#define SDCARD 1

#define DEVIATION 8
#define howmany 16 // how smooth/average?
#define WHICH 1 // for ADC1 mushroom ADC here into FETADC

//////////////////////////////////////////////////////////////////////////

//#define F_CPU 16000000UL 

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
#include <inttypes.h>

#include "sd_raw.h"
#include "sd_raw_config.h"
#include "partition.h"
#include "i2c_master.h"

#include "MAX31865.h"

#define RREF      430.0
#define RNOMINAL  100.0

#define hih6131w  0x4E  //write mode - 0x27 <<1
#define hih6131r  0x4F  //read mode

#ifdef UDR0
#define UBRRH UBRR0H
#define UBRRL UBRR0L
#define UDR UDR0

#define UCSRA UCSR0A
#define UDRE UDRE0
#define RXC RXC0

#define UCSRB UCSR0B
#define RXEN RXEN0
#define TXEN TXEN0
#define RXCIE RXCIE0

#define UCSRC UCSR0C
#define URSEL 
#define UCSZ0 UCSZ00
#define UCSZ1 UCSZ01
#define UCSRC_SELECT 0
#else
#define UCSRC_SELECT (1 << URSEL)
#endif

//#include "waves.h"

#define BV(bit) (1<<(bit)) // Byte Value => converts bit into a byte value. One at bit location.
#define cbi(reg, bit) reg &= ~(BV(bit)) // Clears the corresponding bit in register reg
#define sbi(reg, bit) reg |= (BV(bit))              // Sets the corresponding bit in register reg


#define FS 16000 // sample rate

uint8_t synthPeriod, sample, rate, counter, synthEnergy=128, value=128;

#define UART_BAUD_CALC(UART_BAUD_RATE,F_OSC) ((F_OSC)/((UART_BAUD_RATE)*16l)-1)

//////////////////////////////////////////////////////////////////////////

ISR(TIMER1_COMPA_vect) {
  static uint8_t nextPwm;
  static uint8_t periodCounter;
  static uint16_t synthRand = 1;
  static int16_t nsq;
  int16_t u0,u1;
  /*  
  OCR2B = nextPwm;
  sei();
  synthRand = (synthRand >> 1) ^ ((synthRand & 1) ? 0xB800 : 0);
  u1 = (synthRand & 1) ? synthEnergy : -synthEnergy;
  //  nextPwm = (u1>>2)+0x80; // whitenoise from wormed voice - modulate synthEnergy
  // we can also switch off fet for low energy parts
  synthPeriod=value;
  nextPwm = 120 + synthPeriod * ((nsq++%synthPeriod)/(synthPeriod/2)); // square from wormed voice
  */
}

//////////////////////////////////////////////////////////////////////////

void delay(int ms){
	while(ms){
		_delay_ms(0.96);
		ms--;
	}
}

uint32_t fiver=0;

#ifdef FIVEFIVE
ISR (INT0_vect) // this is 555 interrupt counter
{
  fiver++;
}
#endif

void serial_init(int baudrate){
  UBRRH = (uint8_t)(UART_BAUD_CALC(baudrate,F_CPU)>>8);
  UBRRL = (uint8_t)UART_BAUD_CALC(baudrate,F_CPU); /* set baud rate */
  UCSRB = (1<<RXEN) | (1<<TXEN); /* enable receiver and transmitter */
  UCSRC |=(3<<UCSZ0);   /* asynchronous 8N1 */
}

static int uart_putchar(char c, FILE *stream);

static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
  loop_until_bit_is_set(UCSRA, UDRE);
  UDR = c;
  return 0;
  }

/*void PutStrNl (char *data, bool newLine)
{
    while (*data) PutChr(*data++);
    if (newLine)
    {
        PutChr('\r');    // optional
        PutChr('\n');
    }
    }*/

void adc_init(void)
{
  	cbi(ADMUX, REFS1); 
	sbi(ADMUX, REFS0); // AVCC
	//	sbi(ADMUX, ADLAR); //8 bits
	sbi(ADCSRA, ADPS2);
	//	sbi(ADCSRA, ADPS1); // change speed here! now div by 64
	//	sbi(ADCSRA, ADPS0); // change speed here!

	sbi(ADCSRA, ADEN);
	DDRC = 0x00;
	PORTC = 0x00;
	// settle on 10 bits
}

void init_all() {

  // pins: OC2B is PWM OUT (PD3), INT0 (PD2) is 555 counter IN
// PC0,1,2,3: ADC0+ = adc_light, adc_mushroom, spare_adc, adc_co2
// PB0 is RF ENABLE=OUT 

// PB1 is temp_cs and rest of temp as usual setup MAX31865 (port library)
  
  DDRD=0x08;  // PD3
  DDRB|=0x01; // PB0 and for SD card  

  //  PORTB=0x01; // set up to allow RF OUT...
  
  // Timer 2 set up as a 62500Hz PWM.
  TCCR2A = _BV(COM2A1) |_BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
  //  TCCR2A = _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS20);
  TIMSK2 = 0;
			
  // Timer 1 set up as a 16000Hz sample interrupt
  TCCR1A = 0;
  TCCR1B = _BV(WGM12) | _BV(CS10);
  TCNT1 = 0;
  OCR1A = F_CPU / FS;
  TIMSK1 = _BV(OCIE1A);  
  synthPeriod=0x80; 

  serial_init(9600);
  stdout = &mystdout;
  adc_init(); 
  printf("TESTING1 9600\r\n");

  // how do we set up HIH sensor?
#ifdef HIH
    i2c_init();
#endif

#ifdef MAX   // for MAX31865
  MAX31865_init(MAX31865_2WIRE);
#endif
  
  // 555 is on INT0 - set up here - we don't need pullup as we have on board...
#ifdef FIVEFIVE
  EICRA |= (1 << ISC01);    // on rising edge
  EIMSK |= (1 << INT0);     // Turns on INT0
#endif
  
  sei(); // always set
  
}

unsigned char adcread(unsigned char channel){
  unsigned char result, high;
  ADMUX &= 0xF8; // clear existing channel selection                
  ADMUX |=(channel & 0x07); // set channel/pin
  ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
  loop_until_bit_is_set(ADCSRA, ADIF); /* Wait for ADIF, will happen soon */
  result=ADCH;
  return result;
}

unsigned int adcread10(short channel){
  unsigned int ADresult;
  ADMUX &= 0xF8; // clear existing channel selection                
    ADMUX |=(channel & 0x07); // set channel/pin
  ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
  loop_until_bit_is_set(ADCSRA, ADIF); /* Wait for ADIF, will happen soon */
  ADresult = ADCL;
  ADresult |= ((int)ADCH) << 8;
  return(ADresult);
}

unsigned char humN;
unsigned char tempN;

void THSense(void) {
unsigned char humL;
unsigned char humH;
unsigned short hum;
unsigned char tempL;
unsigned char tempH;
unsigned short temp;

 i2c_start(hih6131w);               // measurement request
  i2c_stop();                             // set stop condition = release bus
  _delay_ms(200);

  i2c_start(hih6131r);               // set device address and read mode

  humH = i2c_read_ack();                   // read one byte from EEPRO M
  humL = i2c_read_ack();
  tempH = i2c_read_ack();
  tempL = i2c_read_nack();
  i2c_stop();

  hum = (humH << 8) + humL;
  temp = (tempH << 8) + tempL;
  hum = (hum << 2);
  hum = (hum >> 2);
  temp = (temp >> 2);
  humN = (hum/16382.0) * 100;
  tempN = ((temp/16382.0) * 165) - 40;

}

unsigned char rx_buffer[8]; // for sd-card

// for averagings/fet stuff
static uint16_t pitch[howmany];
uint16_t total=0, average=0, pitchindex;


void main() {
  const uint32_t SIZEY=2000000000; // 2 GB say
  uint32_t offset=0;
  unsigned char readbuffer,writebuffer;
  float tempy;
  uint16_t lastvalue, difference;

  static uint8_t state=0;
  uint16_t deviation, once;

  
  init_all();

#ifdef SDCARD
    while(1){    // outer loop for SD-cardery
        if(!sd_raw_init())
      {
	//	printf("NO raw");
	continue;
      }

    struct partition_struct* partition = partition_open(sd_raw_read,
							sd_raw_read_interval,
							sd_raw_write,
							sd_raw_write_interval,
							0
							);

    if(!partition)
      {
	partition = partition_open(sd_raw_read,
				   sd_raw_read_interval,
				   sd_raw_write,
				   sd_raw_write_interval,
				   -1
				   );
	if(!partition)
	  {
	    //	printf("NO part");
	    continue;          
	  }
      }

    printf("OPENED");
#endif

    //    sbi(PORTB,0); // !ON! = transmit ON
    
  while(1){
    // turn on and off FET for xx second PB0 
    /*    cbi(PORTB,0);
    _delay_ms(500);
    sbi(PORTB,0); 
    _delay_ms(500);        
    */

    //    _delay_ms(1);        

#ifdef FETADC
    // running average of 10 bit adc values
    // and if we deviate we switch FET
        // testing FET switch on deviation from average - and average code for other modes is here now... - TO TEST
      total-=pitch[pitchindex];
      once=adcread10(WHICH);
      pitch[pitchindex]=once;
      total+=pitch[pitchindex++];
      if (pitchindex>=howmany) pitchindex=0;
      average=total/howmany;
      deviation=abs(once-average);
      if (deviation>DEVIATION) state^=1;

      if (state==1)   sbi(PORTB,0);  // FET is on!PB0
      else   cbi(PORTB,0);  // FET is off
      //      sbi(PORTB,0);
      
#endif
    
#ifdef HIH    // tests for HIH
    THSense();
    value=humN;
    synthEnergy=value*5;
    printf("TEMP: %d HUM: %d\r\n", tempN, humN);
#endif

#ifdef C02 // sensor on 6 down middle jumper, ADC3
      int sensorValue = adcread10(3);
      float voltage = sensorValue*(5000/1024.0); 
      int voltage_diference=voltage-400;
      //      float concentration=voltage_diference*50.0/16.0;
      // test with level of white noise
      
      int vvalue=abs(voltage_diference); // difference as best 0-60 odd...
      difference=abs(lastvalue-vvalue);
      lastvalue=vvalue;
      if (difference>255) synthEnergy=255;
      else      synthEnergy=difference;
      // test this with serial
      //      synthEnergy++;
      printf("CO2 val: %d lastvalue: %d difference: %d\r\n", vvalue, lastvalue, difference);
       _delay_ms(1000);
#endif
      
    
#ifdef FIVEFIVE // test the 555 - working it seems
      _delay_ms(1000);
    uint32_t fivee=fiver;
    printf("555 count: %d\r\n", fivee);
    fiver=0; // zero the 555
#endif
    

#ifdef MAX	
	// test for MAX31865:
	//    Serial.print("Temperature = "); Serial.println(max.temperature(RNOMINAL, RREF));
    	tempy=temperature(RNOMINAL, RREF); // this works as long as sd card is in place
    	int temper=(int)(tempy*100.0);
    	printf("MAX temp %d\r\n", temper);
    	value=(int)(temper/100);
#endif

#ifdef AD620 // ad620 is on ADC2
	int ad620value = adcread10(2);
	value=ad620value>>3;
#endif
	

	//    printf("x");
    
#ifdef SDCARD
    // write to sd-card RAW
    sd_raw_write(offset, &value, 1);

    // read as test - this seems to work...
        sd_raw_read(offset, &readbuffer, 1);
        printf("read back value: %d\r\n", readbuffer);
	offset++;
        if (offset>SIZEY) offset=0; 
#endif
	  
////////////////////////////////    
#ifdef SDCARD
    }
#endif
  
    }
  return 0;
}
